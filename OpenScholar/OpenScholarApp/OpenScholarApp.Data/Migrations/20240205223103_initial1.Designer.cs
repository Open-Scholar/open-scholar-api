// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenScholarApp.Data.Context;

#nullable disable

namespace OpenScholarApp.Data.Migrations
{
    [DbContext(typeof(OpenScholarDbContext))]
    [Migration("20240205223103_initial1")]
    partial class initial1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.AcademicMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("AcademicMaterials");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccountVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProfileCreated")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BirthDate")
                        .HasColumnType("text");

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookSellerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("NumOfPages")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfessorId")
                        .HasColumnType("integer");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookSellerId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.BookRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("RatingStars")
                        .HasColumnType("integer");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BookRatings");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.BookSeller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("BookSellers");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.BookStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TaxNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("BookStores");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.DocumentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentFiles");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Art Academy",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Academy of Music",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Film Academy",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Faculty of Agriculture",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Faculty of Mechanical Engineering",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Faculty of Electrical Engineering",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Faculty of Technology",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Faculty of Computer Science",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Faculty of Natural and Technical Sciences",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Faculty of Medical Sciences",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Faculty of Economics",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Faculty of Law",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Faculty of Philology",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Faculty of Educational Sciences",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Faculty of Tourism and Business Logistics",
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Blaze Koneski Faculty of Philology",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 17,
                            Name = "Faculty of Agricultural Sciences and Food",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 18,
                            Name = "Faculty of Architecture",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 19,
                            Name = "Faculty of Civil Engineering",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 20,
                            Name = "Faculty of Computer Science and Engineering",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 21,
                            Name = "Faculty of Dentistry",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 22,
                            Name = "Faculty of Design and Technologies of Furniture and Interior",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 23,
                            Name = "Faculty of Dramatic Arts",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 24,
                            Name = "Faculty of Economics",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 25,
                            Name = "Faculty of Electrical Engineering and Information Technologies",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 26,
                            Name = "Faculty of Fine Arts",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 27,
                            Name = "Faculty of Forestry",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 28,
                            Name = "Faculty of Mechanical Engineering",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 29,
                            Name = "Faculty of Medicine",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 30,
                            Name = "Faculty of Music",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 31,
                            Name = "Faculty of Natural Sciences and Mathematics",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 32,
                            Name = "Faculty of Pharmacy",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 33,
                            Name = "Faculty of Philosophy",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 34,
                            Name = "Faculty of Physical Education, Sport and Health",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 35,
                            Name = "Faculty of Technology and Metallurgy",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 36,
                            Name = "Faculty of Veterinary Medicine",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 37,
                            Name = "Iustinianus Primus Faculty of Law",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 38,
                            Name = "St. Kliment Ohridski Faculty of Pedagogy",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 39,
                            Name = "St. Clement of Ohrid Faculty of Theology in Skopje",
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 40,
                            Name = "Fakultetin e shkencave Teknike / Факултет за технички науки",
                            UniversityId = 3
                        },
                        new
                        {
                            Id = 41,
                            Name = "Fakulteti i Shkencave të Informatikës / Факултет за информатички науки",
                            UniversityId = 3
                        },
                        new
                        {
                            Id = 42,
                            Name = "Fakulteti i Shkencave Teknologjike / Факултет за технолошки науки",
                            UniversityId = 3
                        },
                        new
                        {
                            Id = 43,
                            Name = "Fakulteti i Shkencave Sociale / Факултет за социјални науки",
                            UniversityId = 3
                        },
                        new
                        {
                            Id = 44,
                            Name = "Fakulteti i Ndërtimtarisë dhe Arkitekturës / Факултет за градежништво и архитектура",
                            UniversityId = 3
                        },
                        new
                        {
                            Id = 45,
                            Name = "SCIENTIFIC INSTITUTE FOR TOBACCO - PRILEP",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 46,
                            Name = "FACULTY OF INFORMATION AND COMMUNICATION TECHNOLOGIES - BITOLA",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 47,
                            Name = "FACULTY OF VETERINARY - BITOLA",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 48,
                            Name = "HIGH MEDICINE SCHOOL - BITOLA",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 49,
                            Name = "FACULTY OF TECHNOLOGY AND TECHNICAL SCIENCE - VELES",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 50,
                            Name = "FACULTY OF LAW - KICEVO",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 51,
                            Name = "FACULTY OF SECURITY - SKOPJE",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 52,
                            Name = "FACULTY OF TOURISM AND HOSPITALITY - OHRID",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 53,
                            Name = "FACULTY OF EDUCATION - BITOLA",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 54,
                            Name = "FACULTY OF TECHNICAL SCIENCES - BITOLA",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 55,
                            Name = "FACULTY OF BIOTECHNICAL SCIENCES - BITOLA",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 56,
                            Name = "FACULTY OF ECONOMICS - PRILEP",
                            UniversityId = 4
                        },
                        new
                        {
                            Id = 57,
                            Name = "Faculty of Agriculture and Biotechnology",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 58,
                            Name = "Faculty of Applied Sciences",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 59,
                            Name = "Faculty of Arts",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 60,
                            Name = "Faculty of Business Administration",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 61,
                            Name = "Faculty of Economics",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 62,
                            Name = "Faculty of Food Technology and Nutrition",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 63,
                            Name = "Faculty of Law",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 64,
                            Name = "Faculty of Medical Sciences",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 65,
                            Name = "Faculty of Natural Sciences and Mathematics",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 66,
                            Name = "Faculty of Philology",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 67,
                            Name = "Faculty of Pedagogy",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 68,
                            Name = "Faculty of Philosophy",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 69,
                            Name = "Faculty of Physical Education",
                            UniversityId = 5
                        },
                        new
                        {
                            Id = 70,
                            Name = "Faculty of Communication Networks and Security (CNS)",
                            UniversityId = 6
                        },
                        new
                        {
                            Id = 71,
                            Name = "Faculty of Computer Science and Engineering (CSE)",
                            UniversityId = 6
                        },
                        new
                        {
                            Id = 72,
                            Name = "Faculty of Information Systems, Visualization, Multimedia and Animation (ISVMA)",
                            UniversityId = 6
                        },
                        new
                        {
                            Id = 73,
                            Name = "Faculty of Applied Information Technology, Machine Intelligence and Robotics (AITMR)",
                            UniversityId = 6
                        },
                        new
                        {
                            Id = 74,
                            Name = "Faculty of Information and Communication Science (ICS)",
                            UniversityId = 6
                        },
                        new
                        {
                            Id = 75,
                            Name = "FACULTY OF ECONOMICS AND ADMINISTRATIVE SCIENCES",
                            UniversityId = 7
                        },
                        new
                        {
                            Id = 76,
                            Name = "FACULTY OF ENGINEERING",
                            UniversityId = 7
                        },
                        new
                        {
                            Id = 77,
                            Name = "FACULTY OF LAW",
                            UniversityId = 7
                        },
                        new
                        {
                            Id = 78,
                            Name = "FACULTY OF DENTAL MEDICINE",
                            UniversityId = 7
                        },
                        new
                        {
                            Id = 79,
                            Name = "FACULTY OF EDUCATION",
                            UniversityId = 7
                        },
                        new
                        {
                            Id = 80,
                            Name = "FACULTY OF HUMANITIES AND SOCIAL SCIENCES",
                            UniversityId = 7
                        },
                        new
                        {
                            Id = 81,
                            Name = "FACULTY OF ART AND DESIGN",
                            UniversityId = 7
                        },
                        new
                        {
                            Id = 82,
                            Name = "FACULTY OF BUSINESS AND ECONOMICS",
                            UniversityId = 8
                        },
                        new
                        {
                            Id = 83,
                            Name = "FACULTY OF LAW",
                            UniversityId = 8
                        },
                        new
                        {
                            Id = 84,
                            Name = "FACULTY OF LANGUAGES, CULTURES AND COMMUNICATION",
                            UniversityId = 8
                        },
                        new
                        {
                            Id = 85,
                            Name = "FACULTY OF CONTEMPORARY SOCIAL SCIENCES",
                            UniversityId = 8
                        },
                        new
                        {
                            Id = 86,
                            Name = "FACULTY OF CONTEMPORARY SCIENCES AND TECHNOLOGIES",
                            UniversityId = 8
                        },
                        new
                        {
                            Id = 87,
                            Name = "FACULTY OF HEALTH SCIENCES",
                            UniversityId = 8
                        },
                        new
                        {
                            Id = 88,
                            Name = "Faculty of Cultural Studies",
                            UniversityId = 9
                        },
                        new
                        {
                            Id = 89,
                            Name = "Faculty of Global Studies",
                            UniversityId = 9
                        },
                        new
                        {
                            Id = 90,
                            Name = "Tourism Faculty",
                            UniversityId = 9
                        },
                        new
                        {
                            Id = 91,
                            Name = "Faculty of Applied Arts",
                            UniversityId = 9
                        },
                        new
                        {
                            Id = 92,
                            Name = "Faculty of Southeast European Studies",
                            UniversityId = 9
                        },
                        new
                        {
                            Id = 93,
                            Name = "Faculty of Dentistry",
                            UniversityId = 10
                        },
                        new
                        {
                            Id = 94,
                            Name = "Faculty of Detectives and Criminology",
                            UniversityId = 10
                        },
                        new
                        {
                            Id = 95,
                            Name = "Faculty of Art and Design",
                            UniversityId = 10
                        },
                        new
                        {
                            Id = 96,
                            Name = "Faculty of Informatics",
                            UniversityId = 10
                        },
                        new
                        {
                            Id = 97,
                            Name = "Faculty of Economics",
                            UniversityId = 10
                        },
                        new
                        {
                            Id = 98,
                            Name = "Faculty of Law",
                            UniversityId = 10
                        },
                        new
                        {
                            Id = 99,
                            Name = "Law and Political Science",
                            UniversityId = 11
                        },
                        new
                        {
                            Id = 100,
                            Name = "Economics",
                            UniversityId = 11
                        },
                        new
                        {
                            Id = 101,
                            Name = "Communication and IT",
                            UniversityId = 11
                        },
                        new
                        {
                            Id = 102,
                            Name = "Design and Multimedia",
                            UniversityId = 11
                        },
                        new
                        {
                            Id = 103,
                            Name = "Applied Foreign Languages",
                            UniversityId = 11
                        },
                        new
                        {
                            Id = 104,
                            Name = "Detectives and Security",
                            UniversityId = 11
                        },
                        new
                        {
                            Id = 105,
                            Name = "Sports Management",
                            UniversityId = 11
                        },
                        new
                        {
                            Id = 106,
                            Name = "Architecture",
                            UniversityId = 11
                        },
                        new
                        {
                            Id = 107,
                            Name = "Faculty of Law",
                            UniversityId = 12
                        },
                        new
                        {
                            Id = 108,
                            Name = "Faculty of Economics",
                            UniversityId = 12
                        },
                        new
                        {
                            Id = 109,
                            Name = "faculty of Architecture",
                            UniversityId = 12
                        },
                        new
                        {
                            Id = 110,
                            Name = "Faculty of Social Sciences - PDR Department",
                            UniversityId = 12
                        },
                        new
                        {
                            Id = 111,
                            Name = "Faculty of Social Sciences - Department of Psychology",
                            UniversityId = 12
                        },
                        new
                        {
                            Id = 112,
                            Name = "Faculty of Engineering and Architecture - Department of Civil Engineering",
                            UniversityId = 12
                        },
                        new
                        {
                            Id = 113,
                            Name = "Faculty of Engineering and Architecture - Department of Architecture",
                            UniversityId = 12
                        },
                        new
                        {
                            Id = 114,
                            Name = "Faculty of Engineering and Architecture - Department of Computer Engineering",
                            UniversityId = 12
                        },
                        new
                        {
                            Id = 115,
                            Name = "Faculty of Informatics",
                            UniversityId = 12
                        });
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.FacultyAcc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FacultyAccounts");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BirthDate")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Expertise")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<int>("universityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("universityId");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldOFStudies")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StudentIndexNumber")
                        .HasColumnType("integer");

                    b.Property<int>("StudentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EKSTCredits")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfessorId")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("UserId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.TopicComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TopicComments");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Goce Delčev University of Štip"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ss. Cyril and Methodius University of Skopje"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mother Teresa University in Skopje"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Clement of Ohrid University of Bitola"
                        },
                        new
                        {
                            Id = 5,
                            Name = "State University of Tetova"
                        },
                        new
                        {
                            Id = 6,
                            Name = "University of Information Science and Technology \"St. Paul The Apostle\""
                        },
                        new
                        {
                            Id = 7,
                            Name = "International Balkan University"
                        },
                        new
                        {
                            Id = 8,
                            Name = "South East European University"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Euro-Balkan University"
                        },
                        new
                        {
                            Id = 10,
                            Name = "European University"
                        },
                        new
                        {
                            Id = 11,
                            Name = "FON University"
                        },
                        new
                        {
                            Id = 12,
                            Name = "International Vision University"
                        });
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.UniversityAcc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("WebAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UniversityAccounts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.AcademicMaterial", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.Student", null)
                        .WithMany("AcademicMaterials")
                        .HasForeignKey("StudentId");

                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Author", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Book", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.BookSeller", null)
                        .WithMany("Books")
                        .HasForeignKey("BookSellerId");

                    b.HasOne("OpenScholarApp.Domain.Entities.Professor", null)
                        .WithMany("Books")
                        .HasForeignKey("ProfessorId");

                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.BookRating", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.BookSeller", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("BookSellers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.BookStore", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("BookStores")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.DocumentFile", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Faculty", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.FacultyAcc", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Faculty")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Professor", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Professors")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenScholarApp.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Professors")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenScholarApp.Domain.Entities.University", "University")
                        .WithMany("Professors")
                        .HasForeignKey("universityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("University");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Student", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Students")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenScholarApp.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenScholarApp.Domain.Entities.University", "University")
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("University");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Subject", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.Professor", null)
                        .WithMany("Subject")
                        .HasForeignKey("ProfessorId");

                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Topic", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.TopicComment", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.UniversityAcc", b =>
                {
                    b.HasOne("OpenScholarApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("University")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("BookSellers");

                    b.Navigation("BookStores");

                    b.Navigation("Faculty");

                    b.Navigation("Professors");

                    b.Navigation("Students");

                    b.Navigation("University");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Book", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.BookSeller", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Professors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Professor", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.Student", b =>
                {
                    b.Navigation("AcademicMaterials");
                });

            modelBuilder.Entity("OpenScholarApp.Domain.Entities.University", b =>
                {
                    b.Navigation("Faculties");

                    b.Navigation("Professors");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
